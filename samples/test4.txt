*main:
	clr 0;
	addi 0, main_1;
	clr 1;
	addi 1, 10;
	clr 2;
	addi 2, fib;
	movp 3;
	# stack: | main_1 10 fib []
	jump;

*main_1:
	# stack: | (fib 10) []
	out -1;
	end;

*fib:
	# stack: | ret_addr n []
	clr 0;
	clr 1;
	mov -1, 0, 1;
	# stack: | ret_addr 0 [n] n
	clr 2;
	addi 2, fib_1;
	clr 3;
	addi 3, fib_2;
	movp 4;
	# stack: | ret_addr 0 n n fib_1 fib_2 []
	jumpifz;

*fib_1:
	# stack: | ret_addr 0 n []
	mov -3, -2;
	mov -1, -3;
	movp -1;
	# stack: | n ret_addr []
	jump;
*fib_2:
	# stack: | ret_addr 0 n []
	clr 0;
	mov -1, -2, 0;
	mov -2, -1;
	addi 0, -1;
	# stack: | ret_addr 0 n [n-1]
	clr 1;
	addi 1, fib_1;
	clr 2;
	addi 2, fib_3;
	movp 3;
	# stack: | ret_addr 0 n (n-1) fib_1 fib_3 []
	jumpifz;

*fib_3:
	# stack: | ret_addr 0 n []
	clr 0;
	addi -1, -1;
	mov -1, -2, 0;
	addi -1, fib_4;
	clr 1;
	addi 1, fib;
	movp 2;
	# stack: | ret_addr (n-1) fib_4 (n-1) fib []
	jump;

*fib_4:
	# stack: | ret_addr (n-1) (fib(n-1)) []
	clr 0;
	addi 0, fib_5;
	clr 1;
	mov -2, 1;
	addi 1, -1;
	clr 2;
	addi 2, fib;
	movp 3;
	# stack: | ret_addr 0 (fib(n-1)) fib_5 (n-2) fib []
	jump;
*fib_5:
	# stack: | ret_addr 0 (fib(n-1)) (fib(n-2)) []
	mov -4, -3;
	mov -2, -4;
	mov -1, -4;
	movp -2;
	# stack: | (fib n) ret_addr []
	jump;

	
